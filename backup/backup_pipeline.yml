#  Template React Deploy

#  This template allows you to deploy your React app to an AWS S3 bucket and invalidate the old AWS Cloudfront distribution.
#  The workflow allows running tests, code linting and security scans on feature branches (as well as master).
#  The react app will be validated, deployed to S3 and trigger an AWS Cloudfront distribution invalidation to refresh the CDN caches after the code is merged to master.

# Prerequisites: $AWS_ACCESS_KEY_ID, $AWS_SECRET_ACCESS_KEY setup in the Deployment variables.
# For advanced cases, please, follow examples from the pipe's:
# README https://bitbucket.org/atlassian/aws-s3-deploy/src/master/README.md
# README https://bitbucket.org/atlassian/aws-cloudfront-invalidate/src/master/README.md

image: node:14.17.3

# Workflow Configuration

options:
  size: 2x

definitions:
  services:
    docker:
      memory: 3072

pipelines:
  #default:
    #- step:
    #    script:
    #      - yarn
    #- parallel:
    #  - step:
    #      name: Build and Test
    #      caches:
    #        - node
    #      script:
    #        - yarn install
    #        - yarn test
    #  - step:
    #      name: Lint the node package
    #      script:
    #        - yarn add eslint
    #        - npx eslint src
    #      caches:
    #        - node
  branches:
    uat-build:
      - parallel:
        - step:
            name: Build and Test
            caches:
              - node
            script:
              - yarn
              - yarn install
              - yarn add ncp
              - cp "src/constants/app-config.uat.json" "src/constants/app-config.json"
              - yarn run build
            artifacts:
              - build/**
        #- step:
        #    name: Security Scan
        #    script:
        #      - pipe: atlassian/git-secrets-scan:0.4.3
      - step:
          name: Deploy to UAT
          deployment: staging
          #trigger: manual
          clone:
            enabled: false
          script:
            # sync your files to S3
            - pipe: atlassian/aws-s3-deploy:0.4.4
              variables:
                AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
                S3_BUCKET: 'hl-web-cms-uat'
                LOCAL_PATH: 'build'
                ACL: 'public-read'
            # triggering a distribution invalidation to refresh the CDN caches
            #- pipe: atlassian/aws-cloudfront-invalidate:0.1.1
            #  variables:
            #    AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
            #    AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
            #    AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
            #    DISTRIBUTION_ID: '123xyz'
    prod-build:
      - parallel:
        - step:
            name: Build and Test
            caches:
              - node
            script:
              - yarn
              - yarn install
              - yarn add ncp
              - cp "src/constants/app-config.prod.json" "src/constants/app-config.json"
              - yarn run build
            artifacts:
              - build/**
        # - step:
        #    name: Security Scan
        #    script:
        #      - pipe: atlassian/git-secrets-scan:0.4.3
      - step:
          name: Deploy to Production
          deployment: production
          #trigger: manual
          clone:
            enabled: false
          script:
            # sync your files to S3
            - pipe: atlassian/aws-s3-deploy:0.4.4
              variables:
                AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
                S3_BUCKET: 'hl-web-cms'
                LOCAL_PATH: 'build'
                ACL: 'public-read'
            # triggering a distribution invalidation to refresh the CDN caches
            #- pipe: atlassian/aws-cloudfront-invalidate:0.1.1
            #  variables:
            #    AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
            #    AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
            #    AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
            #    DISTRIBUTION_ID: '123xyz'
